// Class to enforce range on rates.
class Rate {
  protected:
    double my_rate;
  public:
	Rate( double rate ) {
		if ( rate < 0.0 ||  rate > 1.0) {
			throw std::range_error("Rate ranging error");
		}
		my_rate = rate;
	}
	
	operator double() {
		return my_rate;
	}
};

double ComputeDailyCompoundedInterest(double principle, Rate daily_rate, double days)
{
	double i = principle * daily_rate * days;    // compute daily interest
	return i;
}

double ComputeMonthlyCompoundedInterest(double principal, Rate montly_rate, double months)
{
	double i = principle * monthly_rate * months;  // compute monthly interest
	return i;
}

double ComputeAnnuleCompoundedInterest(double principal, Rate yearly_rate, double years)
{
	double i = principal * yearly_rate * years;  // compute monthly interest
	return i;
}
